//+++++++++++++++++++++++++++++++++++++++++++++++++++++
// File automatically generated by Jfuzzy - DO NOT EDIT
//+++++++++++++++++++++++++++++++++++++++++++++++++++++

package pkg;

import xfuzzy.lang.*;

public class xfl_defuz_GammaQuality extends DefuzMethod {
 public xfl_defuz_GammaQuality() {
   super.parameter = new Parameter[1];
   super.parameter[0] = new Parameter("gamma");
   super.name = "GammaQuality";
   super.pkg = "xfl";
  }

 public double compute(AggregateMemFunc mf) {
   double min = mf.min();
   double max = mf.max();
   double gamma = parameter[0].value;
  double num=0, denom=0;
  for(int i=0; i<mf.conc.length; i++) {
   double w = Math.pow(mf.conc[i].basis(), gamma);
   num += mf.conc[i].degree() * mf.conc[i].center() / w;
   denom += mf.conc[i].degree() / w;
  }
  if(denom == 0) return (min+max)/2;
  return num/denom;
  }

 public boolean test () {
   double gamma = parameter[0].value;
   return ( gamma>=0 );
  }

 public boolean test(AggregateMemFunc mf) {
   for(int i=0; i<mf.conc.length; i++) {
     ParamMemFunc pmf = mf.conc[i].getMF();
     if(!(pmf instanceof pkg.xfl_mf_triangle)
       && !(pmf instanceof pkg.xfl_mf_isosceles)
       && !(pmf instanceof pkg.xfl_mf_trapezoid)
       && !(pmf instanceof pkg.xfl_mf_bell)
       && !(pmf instanceof pkg.xfl_mf_rectangle)
       ) return false;
    }
   return true;
  }

 public String toJava(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = " double "+name+"(OutputMembershipFunction mf) {"+eol;
   code += "   double min = mf.min();"+eol;
   code += "   double max = mf.max();"+eol;
   code += "   double gamma = "+parameter[0].value+";"+eol;
   code += "  double num=0, denom=0;"+eol;
   code += "  for(int i=0; i<mf.conc.length; i++) {"+eol;
   code += "   double w = Math.pow(mf.conc[i].basis(), gamma);"+eol;
   code += "   num += mf.conc[i].degree() * mf.conc[i].center() / w;"+eol;
   code += "   denom += mf.conc[i].degree() / w;"+eol;
   code += "  }"+eol;
   code += "  if(denom == 0) return (min+max)/2;"+eol;
   code += "  return num/denom;"+eol;
   code += "  }"+eol;
   return code;
  }

 public String toC(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = "static double "+name+"(FuzzyNumber mf) {"+eol;
   code += " double min = mf.conc[0].min;"+eol;
   code += " double max = mf.conc[0].max;"+eol;
   code += " double gamma = "+parameter[0].value+";"+eol;
   code += "   double w, num=0, denom=0;"+eol;
   code += "   int i;"+eol;
   code += "   for(i=0; i<mf.length; i++) {"+eol;
   code += "    w = pow( basis(mf.conc[i]), gamma);"+eol;
   code += "    num += mf.degree[i] * center(mf.conc[i]) / w;"+eol;
   code += "    denom += mf.degree[i] / w;"+eol;
   code += "   }"+eol;
   code += "   if(denom == 0) return (min+max)/2;"+eol;
   code += "   return num/denom;"+eol;
   code += "}"+eol;
   return code;
  }

 public String toCpp(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = "double "+name+"(OutputMembershipFunction &mf) {"+eol;
   code += " double min = mf.min();"+eol;
   code += " double max = mf.max();"+eol;
   code += " double gamma = "+parameter[0].value+";"+eol;
   code += "   double num=0, denom=0;"+eol;
   code += "   for(int i=0; i<mf.length; i++) {"+eol;
   code += "    double w = pow( mf.conc[i]->basis(), gamma);"+eol;
   code += "    num += mf.conc[i]->degree() * mf.conc[i]->center() / w;"+eol;
   code += "    denom += mf.conc[i]->degree() / w;"+eol;
   code += "   }"+eol;
   code += "   if(denom == 0) return (min+max)/2;"+eol;
   code += "   return num/denom;"+eol;
   code += "}"+eol+eol;
   return code;
  }
}
