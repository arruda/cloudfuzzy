//+++++++++++++++++++++++++++++++++++++++++++++++++++++
// File automatically generated by Jfuzzy - DO NOT EDIT
//+++++++++++++++++++++++++++++++++++++++++++++++++++++

package pkg;

import xfuzzy.lang.*;

public class xfl_mf_sigma extends ParamMemFunc {
 public xfl_mf_sigma() {
   super.parameter = new Parameter[2];
   super.parameter[0] = new Parameter("a");
   super.parameter[1] = new Parameter("b");
   super.name = "sigma";
   super.pkg = "xfl";
  }

 public double compute(double x) {
   double a = parameter[0].value;
   double b = parameter[1].value;
 return 1/(1+ Math.exp( (a-x)/b )); 
  }

 public double greatereq(double x) {
   double min = this.u.min();
   double a = parameter[0].value;
   double b = parameter[1].value;
   double y = (b>0? x : min);
   return 1 / (1+ Math.exp( (a-y)/b ));
  }

 public double smallereq(double x) {
   double max = this.u.max();
   double a = parameter[0].value;
   double b = parameter[1].value;
   double y = (b<0? x : max);
   return 1 / (1+ Math.exp( (a-y)/b ));
  }

 public double[] deriv_eq(double x) {
   double[] deriv = new double[2];
   double a = parameter[0].value;
   double b = parameter[1].value;
   double aux1 = Math.exp((a-x)/b);
   double aux2 = aux1/((1+aux1)*(1+aux1));
   deriv[0] = - aux2/b;
   deriv[1] = aux2*(a-x)/(b*b);
   return deriv;
  }

 public double[] deriv_greq(double x) {
   double[] deriv = new double[2];
   double min = this.u.min();
   double a = parameter[0].value;
   double b = parameter[1].value;
   double y = (b>0? x : min);
   double aux1 = Math.exp((a-y)/b);
   double aux2 = aux1/((1+aux1)*(1+aux1));
   deriv[0] = - aux2/b;
   deriv[1] = aux2*(a-y)/(b*b);
   return deriv;
  }

 public double[] deriv_smeq(double x) {
   double[] deriv = new double[2];
   double max = this.u.max();
   double a = parameter[0].value;
   double b = parameter[1].value;
   double y = (b<0? x : max);
   double aux1 = Math.exp((a-y)/b);
   double aux2 = aux1/((1+aux1)*(1+aux1));
   deriv[0] = - aux2/b;
   deriv[1] = aux2*(a-y)/(b*b);
   return deriv;
  }

 public boolean test () {
   double min = this.u.min();
   double max = this.u.max();
   double a = parameter[0].value;
   double b = parameter[1].value;
   return ( a>=min && a<=max );
  }

 public String toJava() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "  private class MF_xfl_sigma extends InnerMembershipFunction {"+eol;
   code += "   double a;"+eol;
   code += "   double b;"+eol;
   code += eol+"   MF_xfl_sigma( double min, double max, double step, double param[]){"+eol;
   code += "    super.min = min;"+eol;
   code += "    super.max = max;"+eol;
   code += "    super.step = step;"+eol;
   code += "    this.a = param[0];"+eol;
   code += "    this.b = param[1];"+eol;
   code += "   }"+eol;
   code += "   double param(int _i) {"+eol;
   code += "    switch(_i) {"+eol;
   code += "     case 0: return a;"+eol;
   code += "     case 1: return b;"+eol;
   code += "     default: return 0;"+eol;
   code += "    }"+eol;
   code += "   }"+eol;
   code += "   double isEqual(double x) {"+eol;
   code += "    return 1/(1+ Math.exp( (a-x)/b )); "+eol;
   code += "   }"+eol;
   code += "   double isGreaterOrEqual(double x) {"+eol;
   code += "      double y = (b>0? x : min);"+eol;
   code += "      return 1 / (1+ Math.exp( (a-y)/b ));"+eol;
   code += "   }"+eol;
   code += "   double isSmallerOrEqual(double x) {"+eol;
   code += "      double y = (b<0? x : max);"+eol;
   code += "      return 1 / (1+ Math.exp( (a-y)/b ));"+eol;
   code += "   }"+eol;
   code += "  }"+eol;
   return code;
  }

 public String toC() {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "static double MF_xfl_sigma_equal(MembershipFunction _mf,double x) {"+eol;
   code += " double a = _mf.param[0];"+eol;
   code += " double b = _mf.param[1];"+eol;
   code += "  return 1/(1+ exp( (a-x)/b )); "+eol;
   code += "}"+eol;
   code += "static double MF_xfl_sigma_greq(MembershipFunction _mf,double x) {"+eol;
   code += " double min = _mf.min;"+eol;
   code += " double a = _mf.param[0];"+eol;
   code += " double b = _mf.param[1];"+eol;
   code += "    double y = (b>0? x : min);"+eol;
   code += "    return 1 / (1+ exp( (a-y)/b ));"+eol;
   code += "}"+eol;
   code += "static double MF_xfl_sigma_smeq(MembershipFunction _mf,double x) {"+eol;
   code += " double max = _mf.max;"+eol;
   code += " double a = _mf.param[0];"+eol;
   code += " double b = _mf.param[1];"+eol;
   code += "    double y = (b<0? x : max);"+eol;
   code += "    return 1 / (1+ exp( (a-y)/b ));"+eol;
   code += "}"+eol;
   code += "static MembershipFunction createMF_xfl_sigma( double min, double max, double step, double *param,int length) {"+eol;
   code += " int i;"+eol;
   code += " MembershipFunction _mf;"+eol;
   code += " _mf.min = min;"+eol;
   code += " _mf.max = max;"+eol;
   code += " _mf.step = step;"+eol;
   code += " _mf.param = (double*) malloc(length*sizeof(double));"+eol;
   code += " for(i=0;i<length;i++) _mf.param[i] = param[i];"+eol;
   code += " _mf.compute_eq = MF_xfl_sigma_equal;"+eol;
   code += " _mf.compute_greq = MF_xfl_sigma_greq;"+eol;
   code += " _mf.compute_smeq = MF_xfl_sigma_smeq;"+eol;
   code += " _mf.center = _defaultMFcenter;"+eol;
   code += " _mf.basis = _defaultMFbasis;"+eol;
   code += " return _mf;"+eol;
   code += "}"+eol;
   return code;
  }
 public String toCpp(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += name+"::"+name+"(double min,double max,double step,double *param, int length) :"+eol;
   code += "ParamMembershipFunction(min,max,step) {"+eol;
   code += " this->name = \""+name+"\";"+eol;
   code += " this->a = param[0];"+eol;
   code += " this->b = param[1];"+eol;
   code += "}"+eol+eol;
   code += name+" * "+name+"::dup() {"+eol;
   code += " double param[2] = {a,b};"+eol;
   code += " return new "+name+"(min,max,step,param,2);"+eol;
   code += "}"+eol+eol;
   code += "double "+name+"::param(int _i) {"+eol;
   code += " switch(_i) {"+eol;
   code += "  case 0: return a;"+eol;
   code += "  case 1: return b;"+eol;
   code += "  default: return 0;"+eol;
   code += " }"+eol;
   code += "}"+eol+eol;
   code += "double "+name+"::compute_eq(double x) {"+eol;
   code += "  return 1/(1+ exp( (a-x)/b )); "+eol;
   code += "}"+eol+eol;
   code += "double "+name+"::compute_greq(double x) {"+eol;
   code += "    double y = (b>0? x : min);"+eol;
   code += "    return 1 / (1+ exp( (a-y)/b ));"+eol;
   code += "}"+eol+eol;
   code += "double "+name+"::compute_smeq(double x) {"+eol;
   code += "    double y = (b<0? x : max);"+eol;
   code += "    return 1 / (1+ exp( (a-y)/b ));"+eol;
   code += "}"+eol+eol;
   return code;
  }

 public String toHpp(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = "";
   code += "class "+name+": public ParamMembershipFunction {"+eol;
   code += "private:"+eol;
   code += " double a;"+eol;
   code += " double b;"+eol;
   code += eol+"public:"+eol;
   code += " "+name+"() {};"+eol;
   code += " virtual ~"+name+"() {};"+eol;
   code += " "+name+"(double min,double max,double step,double *param, int length);"+eol;
   code += " "+name+"*dup();"+eol;
   code += " virtual double param(int _i);"+eol;
   code += " virtual double compute_eq(double x);"+eol;
   code += " virtual double compute_greq(double x);"+eol;
   code += " virtual double compute_smeq(double x);"+eol;
   code += "};"+eol+eol;
   return code;
  }

//+++++++++++++++++++++++++++++++++++++++++++++++++
 public void update() {
  if(!isAdjustable()) return;
  double[] prevvalue = get();
  double[] desp = getDesp();
  boolean[] adj = getAdjustable();

  double a = prevvalue[0] + desp[0];
  double b = prevvalue[1] + desp[1];
  double min = this.u.min();
  double max = this.u.max();

  if(a<min) a = min;
  if(a>max) a = max;
  if(b/prevvalue[1]<=0) b = prevvalue[1]/2;

  parameter[0].value = a;
  parameter[0].setDesp(0.0);
  parameter[0].setPrevDesp(parameter[0].value - prevvalue[0]);

  parameter[1].value = b;
  parameter[1].setDesp(0.0);
  parameter[1].setPrevDesp(parameter[1].value - prevvalue[1]);
 }
//+++++++++++++++++++++++++++++++++++++++++++++++++
}
