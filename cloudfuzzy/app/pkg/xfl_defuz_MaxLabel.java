//+++++++++++++++++++++++++++++++++++++++++++++++++++++
// File automatically generated by Jfuzzy - DO NOT EDIT
//+++++++++++++++++++++++++++++++++++++++++++++++++++++

package pkg;

import xfuzzy.lang.*;

public class xfl_defuz_MaxLabel extends DefuzMethod {
 public xfl_defuz_MaxLabel() {
   super.parameter = new Parameter[0];
   super.name = "MaxLabel";
   super.pkg = "xfl";
  }

 public double compute(AggregateMemFunc mf) {
   double max = mf.max();
  double maxdegree=0, center=0;
  for(int i=0; i<mf.conc.length; i++)
   if(mf.conc[i].degree() >= maxdegree)
    { center = mf.conc[i].center(); maxdegree = mf.conc[i].degree(); }
  return center;
  }

 public boolean test () {
   return true;
  }

 public boolean test(AggregateMemFunc mf) {
   return true;
  }

 public String toJava(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = " double "+name+"(OutputMembershipFunction mf) {"+eol;
   code += "   double max = mf.max();"+eol;
   code += "  double maxdegree=0, center=0;"+eol;
   code += "  for(int i=0; i<mf.conc.length; i++)"+eol;
   code += "   if(mf.conc[i].degree() >= maxdegree)"+eol;
   code += "    { center = mf.conc[i].center(); maxdegree = mf.conc[i].degree(); }"+eol;
   code += "  return center;"+eol;
   code += "  }"+eol;
   return code;
  }

 public String toC(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = "static double "+name+"(FuzzyNumber mf) {"+eol;
   code += "   double mx=0, c=0;"+eol;
   code += "   int i;"+eol;
   code += "   for(i=0; i<mf.length; i++)"+eol;
   code += "    if(mf.degree[i] >= mx) { c = center(mf.conc[i]); mx = mf.degree[i]; }"+eol;
   code += "   return c;"+eol;
   code += "}"+eol;
   return code;
  }

 public String toCpp(String name) {
   String eol = System.getProperty("line.separator", "\n");
   String code = "double "+name+"(OutputMembershipFunction &mf) {"+eol;
   code += " double max = mf.max();"+eol;
   code += "   double maxdegree=0, center=0;"+eol;
   code += "   for(int i=0; i<mf.length; i++)"+eol;
   code += "    if(mf.conc[i]->degree() >= maxdegree)"+eol;
   code += "     { center = mf.conc[i]->center(); maxdegree = mf.conc[i]->degree(); }"+eol;
   code += "   return center;"+eol;
   code += "}"+eol+eol;
   return code;
  }
}
